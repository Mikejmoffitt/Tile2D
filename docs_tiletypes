
The Different Types of Tiles
================================================================================

There are four specialized types of tiles, each adapted to specific use cases,
and each with their own performance characteristics. These types are:

* BGTile
* SceneTile
* AnimTile
* PostTile

What follows is a quick summary of each.

BGTile
--------------------------------------------------------------------------------
This is the most basic Tile. It's rendering plane is locked to PLANE_BG, and it
uses a stock shader (that must be loaded, don't forget) that doesn't do much
other than plop its texture on it and do positional transforms, so it's pretty
quick.

Notes:
* Very far away
* Uses a stock shader
* Entirely opaque, so we can leverage draw order optimizations on it.

SceneTile
--------------------------------------------------------------------------------
This Tile is meant for static (read: not animated) scene elements, such as
platforms or the ground or other non-animated scenery. It's similar to the
BGTile in every way except its rendering plane is not locked to PLANE_BG, and
it can have transparency.

Non-transparent SceneTiles will be draw-order optimized just as with BGTiles.
Any tiles with transparency must be drawn using the Painter's algorithm to
ensure proper display of transparency.

*Note, animation in this case refers to having an animated texture. You can
 move these around all you want.

Notes:
* Can be on any rendering plane.
* Can have transparency.
* Also uses a stock shader.

AnimTile
--------------------------------------------------------------------------------
This tile is meant for animated sprites and other elements. It allows for
multiple frames of animation to be stored in the Tile's texture, and then the
shader runs through them at the desired framerate. It still uses a stock shader,
but since it does the animation, it will be marginally slower.

Notes:
* Can be on any rendering plane.
* Can have transparency.
* Uses a slightly slower stock shader.

Notes on organizing frames in the texture.
* Still need to abide by the power of two dimension rule.
* Each successive frame needs to be to the right of the previous one.
* Only the overall dimensions need to follow that rule. The individual frames
  can be whatever dimension you want. (As long as their tightly packed and start
  at (0,0) in the texture.

                    2^x width
       --------------------------------------------------------------------------
2^y    |        |       |       |       |       |       |       |       |       |
height | frame  | frame | frame | frame | frame | frame | frame | frame | frame |
       |   0    |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |
       |        |       |       |       |       |       |       |       |       |
       --------------------------------------------------------------------------
       
PostTile
---------------------------------------------------------------------------------
PostTiles are special. They're meant for adding post-processed effects. Special
stuff. They're rendered in a second pass, so they have access to what the entire
scene looks like. They're also highly programmable. They have four texture slots
that can be specified, as well as a custom shader. This isn't without caveat,
however:
* Custom shaders must still conform to conventions set on attribute and uniform
  variable names. (They also must have those variables.)
* The four textures must be specified. One of them can be the framebuffer of the
  prior pass.
* They're rendered into the same framebuffer without clearing, so their plane
  specification is still taken into account. You can place PostTiles behind
  other previously rendered tiles.
  
Notes:
* Can be on any rendering plane.
* Can have transparency.
* Uses custom shaders wich non-custom attributes and uniforms.
* 4 custom textures.
